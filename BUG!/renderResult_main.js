var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// img/handler.js
function showSvgHelloWorld() {
  const svgContent = `
      <svg xmlns="http://www.w3.org/2000/svg" width="200" height="200">
        <text x="50%" y="50%" font-size="20" text-anchor="middle" fill="black">Hello World</text>
      </svg>
    `;
  return new Response(svgContent, {
    headers: { "Content-Type": "image/svg+xml" }
  });
}
__name(showSvgHelloWorld, "showSvgHelloWorld");
function showSvgNiHao() {
  const svgContent = `
      <svg xmlns="http://www.w3.org/2000/svg" width="200" height="200">
        <text x="50%" y="50%" font-size="20" text-anchor="middle" fill="black">Ni Hao</text>
      </svg>
    `;
  return new Response(svgContent, {
    headers: { "Content-Type": "image/svg+xml" }
  });
}
__name(showSvgNiHao, "showSvgNiHao");

// img/url.js
var imgRoutes = {
  "/a.png": showSvgHelloWorld,
  "/svg": showSvgNiHao
};

// github/public/utils/calculateWidth.js
function calculateTextWidth(text, fontSize = 16) {
  const averageCharacterWidth = 0.5;
  const textLength = text.length;
  const estimatedWidth = textLength * fontSize * averageCharacterWidth;
  console.log(textLength);
  console.log(fontSize);
  console.log(averageCharacterWidth);
  console.log(estimatedWidth);
  return estimatedWidth;
}
__name(calculateTextWidth, "calculateTextWidth");

// github/public/handler.js
async function ifPublic(request) {
  const { user, repo } = Object.fromEntries(new URL(request.url).searchParams.entries());
  const repoUrl = `https://github.com/${user}/${repo}`;
  const response = await fetch(repoUrl);
  const statusCode = response.status;
  const text = statusCode == 200 ? "Public" : "Private";
  const svgContent = `
        <svg xmlns="http://www.w3.org/2000/svg" height="16" width="${calculateTextWidth(text)}">
            <text x="0" y="16" font-size="16">${text}</text>
        </svg>
    `;
  return new Response(svgContent, {
    headers: { "Content-Type": "image/svg+xml" }
  });
}
__name(ifPublic, "ifPublic");

// github/public/url.js
var github_public = {
  "/": ifPublic
};

// calendar/front/files.js
var indexHTML = `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Let Calendar</title>
    <link rel="stylesheet" href="./front/style.css">
    <script src="https://letmefly.xyz/Links/Common.js" async><\/script>
</head>
<body>
    <div class="calendar">
        <div class="header">
            <button id="prevWeek">&lt;</button>
            <span id="weekRange"></span>
            <button id="nextWeek">&gt;</button>
        </div>
        <table id="calendarTable">
            <thead>
                <tr id="dateRow">
                    <th>Time</th>
                    <th>Mon<br/><span></span></th>
                    <th>Tue<br/><span></span></th>
                    <th>Wed<br/><span></span></th>
                    <th>Thu<br/><span></span></th>
                    <th>Fri<br/><span></span></th>
                    <th>Sat<br/><span></span></th>
                    <th>Sun<br/><span></span></th>
                </tr>
            </thead>
            <tbody>
                <!-- Rows will be generated by JavaScript -->
            </tbody>
        </table>
    </div>
    <!-- \u5F39\u51FA\u6846 -->
    <div id="eventModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>\u521B\u5EFA\u4E8B\u4EF6</h2>
            <form id="eventForm">
                <label for="eventTitle">\u6807\u9898:</label>
                <input type="text" id="eventTitle" name="title" required><br><br>

                <label for="eventDescription">\u63CF\u8FF0:</label>
                <textarea id="eventDescription" name="description"></textarea><br><br>

                <label for="eventStartTime">\u5F00\u59CB\u65F6\u95F4:</label>
                <input type="datetime-local" id="eventStartTime" name="startTime" required><br><br>

                <label for="eventEndTime">\u7ED3\u675F\u65F6\u95F4:</label>
                <input type="datetime-local" id="eventEndTime" name="endTime" required><br><br>

                <label>\u6807\u7B7E:</label>
                <div id="tagsContainer">
                    \u6B63\u5728\u52A0\u8F7D...
                </div><br><br>

                <button type="submit">\u521B\u5EFA</button>
            </form>
        </div>
    </div>
    <script src="./front/script.js"><\/script>
</body>
</html>
`;
var stylesCSS = `
/* styles.css */
body {
    font-family: Arial, sans-serif;
}

.calendar {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
}

.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.header button {
    background-color: #f4f4f4;
    border: 1px solid #ddd;
    padding: 5px 10px;
    cursor: pointer;
    font-size: 16px;
}

.header button:hover {
    background-color: #ddd;
}

#weekRange {
    font-size: 18px;
    font-weight: bold;
}

table {
    width: 100%;
    border-collapse: collapse;
    user-select: none;
    table-layout: fixed;
}

th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: center;
}

th {
    background-color: #f4f4f4;
}

th.today {
    background-color: antiquewhite;
}

tr td.today {
    border-left: 2px solid antiquewhite;
    border-right: 2px solid antiquewhite;
}

tr:last-child td.today {
    border-bottom: 2px solid antiquewhite;
}

td {
    height: 50px;
    position: relative;
}

.time-slot {
    background-color: rgba(0, 123, 255, 0.3);
    cursor: pointer;
    z-index: 1;
}

/* \u5F39\u51FA\u6846\u6837\u5F0F */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
    background-color: #fff;
    margin: 10% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 50%;
    max-width: 600px;
    border-radius: 8px;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close:hover {
    color: #000;
}

#tagsContainer {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
}

#tagsContainer label {
    display: flex;
    align-items: center;
    gap: 4px;
}

.event-block {
    position: absolute;
    left: 0;
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    padding: 2px;
    box-sizing: border-box;
    font-size: 12px;
    color: #000;
    cursor: pointer;
    background-color: rgba(0, 123, 255, 0.3);
    border: 1px solid rgba(0, 123, 255, 0.5);
}
`;
var scriptsJS = `
// script.js
document.addEventListener('DOMContentLoaded', function () {
    const globalDict = {};
    /************************** \u521D\u59CB\u5316\u65E5\u671F **************************/
    const tableBody = document.querySelector('#calendarTable tbody');
    const dateRow = document.querySelector('#dateRow');
    const weekRange = document.querySelector('#weekRange');
    const prevWeekButton = document.querySelector('#prevWeek');
    const nextWeekButton = document.querySelector('#nextWeek');

    let currentDate = new Date(); // \u5F53\u524D\u65E5\u671F

    // \u751F\u6210\u65F6\u95F4\u884C
    const hours = 24; // 24\u5C0F\u65F6\u5236
    for (let i = 0; i < hours; i++) {
        const row = document.createElement('tr');
        row.innerHTML = '<td>' + i + ':00</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td>';
        tableBody.appendChild(row);
    }

    // \u66F4\u65B0\u65E5\u671F\u884C\u548C\u5468\u8303\u56F4\u663E\u793A
    function updateDates() {
        const startOfWeek = getStartOfWeek(currentDate);
        const oneDay_ths = dateRow.querySelectorAll('th');
        const hours_trs = tableBody.querySelectorAll('tr');

        for (let i = 0; i < 7; i++) {
            const date = new Date(startOfWeek);
            date.setDate(startOfWeek.getDate() + i);
            oneDay_ths[i + 1].querySelector('span').innerHTML = date.toLocaleDateString('zh-CN', { month: 'numeric', day: 'numeric' });
        }

        // \u66F4\u65B0\u5468\u8303\u56F4\u663E\u793A
        const endOfWeek = new Date(startOfWeek);
        endOfWeek.setDate(startOfWeek.getDate() + 6);
        weekRange.textContent = startOfWeek.toLocaleDateString('zh-CN') + '-' + endOfWeek.toLocaleDateString('zh-CN');

        // \u5982\u679C\u663E\u793A\u5468\u662F\u5F53\u524D\u5468\uFF0C\u5219\u9AD8\u4EAE\u4ECA\u5929
        if (currentDate.toDateString() == getStartOfWeek(new Date()).toDateString()) {
            console.log('this week');
            const day = (new Date()).getDay();
            const index = day ? day : 7;  // \u5468\u65E5\u7684\u4E0B\u6807\u662F7
            oneDay_ths[index].classList.add('today');
            hours_trs.forEach(tr => {
                tr.querySelectorAll('td')[index].classList.add('today');
            });
        } else {
            oneDay_ths.forEach(th => th.classList.remove('today'));
            hours_trs.forEach(tr => {
                tr.querySelectorAll('td').forEach(td => td.classList.remove('today'));
            });
        }
    }

    /**
     * \u83B7\u53D6\u5F53\u524D\u5468\u7684\u5468\u4E00
     * @param {Date} date - \u5F53\u524D\u65E5\u671F
     * @returns {Date} - \u5468\u4E00\u65E5\u671F
     */
    function getStartOfWeek(date) {
        const day = date.getDay();
        const diff = date.getDate() - day + (day === 0 ? -6 : 1);  // \u5982\u679C\u5F53\u524D\u662F\u5468\u65E5\uFF0C\u5219\u51CF\u53BB6\u5929
        return new Date(date.setDate(diff));
    }

    // \u5207\u6362\u5230\u4E0A\u4E00\u5468
    prevWeekButton.addEventListener('click', () => {
        currentDate.setDate(currentDate.getDate() - 7);
        updateDates();
        renderEvent();
    });

    // \u5207\u6362\u5230\u4E0B\u4E00\u5468
    nextWeekButton.addEventListener('click', () => {
        currentDate.setDate(currentDate.getDate() + 7);
        updateDates();
        renderEvent();
    });

    // \u521D\u59CB\u5316\u65E5\u671F
    updateDates();

    /*************************** \u5B9A\u4E49\u62D6\u62FD\u9AD8\u4EAE ***************************/
    // \u9AD8\u4EAE\u5355\u5143\u683C\u903B\u8F91\uFF08\u4FDD\u6301\u4E0D\u53D8\uFF09
    let isDragging = false;
    let startCell = null;
    let endCell = null;

    tableBody.addEventListener('mousedown', function (e) {
        if (e.target.tagName === 'TD' && e.target.cellIndex !== 0) {
            isDragging = true;
            startCell = e.target;
            endCell = e.target;
            highlightCells(startCell, startCell);
        }
    });

    tableBody.addEventListener('mouseover', function (e) {
        if (isDragging && e.target.tagName === 'TD' && e.target.cellIndex !== 0) {
            endCell = e.target;
            highlightCells(startCell, endCell);
        }
    });

    tableBody.addEventListener('mouseup', function () {
        if (isDragging && startCell && endCell) {
            const startTime = calculateTimeFromCell(startCell);
            const endTime = calculateTimeFromCell(endCell, 1);  // \u7ED3\u675F\u65F6\u95F4\u4E3A\u4E0B\u4E00\u4E2A\u5355\u5143\u683C
            showModal(startTime, endTime);
        }
        isDragging = false;
        startCell = null;
        endCell = null;
    });

    function highlightCells(start, end) {
        const startRow = start.parentElement.rowIndex;
        const startCol = start.cellIndex;
        const endRow = end.parentElement.rowIndex;

        const minRow = Math.min(startRow, endRow);
        const maxRow = Math.max(startRow, endRow);
        const Col = startCol;

        // \u6E05\u9664\u4E4B\u524D\u7684\u9AD8\u4EAE
        const allCells = tableBody.querySelectorAll('td');
        allCells.forEach(cell => cell.classList.remove('time-slot'));

        // \u9AD8\u4EAE\u9009\u4E2D\u7684\u533A\u57DF
        for (let i = minRow - 1; i <= maxRow - 1; i++) {  // \u8868\u5934\u8FD8\u6709\u4E00\u884C
            const cell = tableBody.rows[i].cells[Col];
            cell.classList.add('time-slot');
        }
    }
    

    /*************************** \u4E8B\u4EF6\u521B\u5EFA ***************************/
    // \u83B7\u53D6\u5F39\u51FA\u6846\u76F8\u5173\u5143\u7D20
    const modal = document.getElementById('eventModal');
    const closeBtn = document.querySelector('.close');
    const eventForm = document.getElementById('eventForm');
    // \u663E\u793A\u5F39\u51FA\u6846
    /**
     * \u663E\u793A\u4E8B\u4EF6\u521B\u5EFA\u6846
     * @param {string} startTime - \u5F00\u59CB\u65F6\u95F4\uFF0C\u59822023-10-05T22:30:00
     * @param {string} endTime   - \u7ED3\u675F\u65F6\u95F4
     */
    function showModal(startTime, endTime) {
        document.getElementById('eventStartTime').value = startTime;
        document.getElementById('eventEndTime').value = endTime;
        modal.style.display = 'block';
    }
    // \u9690\u85CF\u5F39\u51FA\u6846
    function hideModal() {
        modal.style.display = 'none';
        tableBody.querySelectorAll('tr').forEach(tr => {
            tr.querySelectorAll('td').forEach(td => {
                td.classList.remove('time-slot');
            });
        });
    }
    // \u70B9\u51FB\u5173\u95ED\u6309\u94AE\u9690\u85CF\u5F39\u51FA\u6846
    closeBtn.addEventListener('click', hideModal);
    // \u70B9\u51FB\u6A21\u6001\u6846\u5916\u90E8\u9690\u85CF\u5F39\u51FA\u6846
    window.addEventListener('click', (e) => {
        if (e.target === modal) {
            hideModal();
        }
    });
    // \u6839\u636E\u5355\u5143\u683C\u8BA1\u7B97\u65F6\u95F4
    function calculateTimeFromCell(cell, hourDiff=0) {
        const rowIndex = cell.parentElement.rowIndex - 1;  // \u51CF\u53BB\u8868\u5934\u884C
        const colIndex = cell.cellIndex - 1;  // \u51CF\u53BB\u65F6\u95F4\u5217
        const startOfWeek = getStartOfWeek(currentDate);
        const date = new Date(startOfWeek);
        date.setDate(startOfWeek.getDate() + colIndex);
        date.setHours(rowIndex + 8 + hourDiff, 0, 0, 0);  // \u8F6C\u4E3AUTC+8
        return date.toISOString().slice(0, 16);  // \u8F6C\u6362\u4E3Adatetime-local\u683C\u5F0F
    }
    // \u83B7\u53D6\u6807\u7B7E
    function loadTags() {
        console.log('loading tags');
        // const tagsUrl = 'back/tags.json';  // \u8BB0\u5F97\u4FEE\u6539\u4E3A\u771F\u6B63\u7684\u76F8\u5BF9\u8DEF\u5F84
        const tagsUrl = './tags';
        fetch(tagsUrl, {
            credentials: 'include' // \u5305\u542BCookie
        })
        .then(response => response.json())
        .then(data => {
            const tagsContainer = document.getElementById('tagsContainer');
            tagsContainer.innerHTML = data.map(tag => '                <label>                    <input type="checkbox" name="tags" value="' + tag.tagId + '">                    <span style="background-color: ' + tag.tagColor + '">' + tag.tagName + '</span>                </label>            ').join('');
        })
        .catch(error => console.error('Error loading tags:', error));
    }
    setTimeout(() => {
        loadTags();
    }, 10);
    // \u63D0\u4EA4\u8868\u5355
    eventForm.addEventListener('submit', function (e) {
        e.preventDefault();
        const formData = {
            title: document.getElementById('eventTitle').value,
            description: document.getElementById('eventDescription').value,
            // startTime: new Date(new Date(document.getElementById('eventStartTime').value).getTime() - 8 * 3600 * 1000).toISOString().slice(0, 16) + ':00',
            startTime: new Date(document.getElementById('eventStartTime').value).toISOString().slice(0, 16) + ':00',
            during: (new Date(document.getElementById('eventEndTime').value) - new Date(document.getElementById('eventStartTime').value)) / 60000, // \u8F6C\u6362\u4E3A\u5206\u949F
            tags: Array.from(document.querySelectorAll('input[name="tags"]:checked')).map(input => parseInt(input.value))
        };
        // const eventUrl = 'back/event';  // \u8BB0\u5F97\u4FEE\u6539\u4E3A\u771F\u6B63
        const eventUrl = './events';
        fetch(eventUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include', // \u5305\u542BCookie
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success === 'ok') {
                alert('\u4E8B\u4EF6\u521B\u5EFA\u6210\u529F\uFF01');
                hideModal();
            } else {
                alert('\u4E8B\u4EF6\u521B\u5EFA\u5931\u8D25\uFF01');
            }
        })
        .catch(error => console.error('Error creating event:', error));
    });


    /*************************** \u663E\u793A\u672C\u5468\u4E8B\u4EF6 ***************************/
    /**
     * \u5C06\u4E8B\u4EF6\u6570\u636E\u6E32\u67D3\u5230\u65E5\u5386\u4E0A
     * @param {JSON} events - \u4E8B\u4EF6\u5217\u8868
     */
    function renderEvent() {
        const events = globalDict['events'];
        const tableBody = document.querySelector('#calendarTable tbody');
        const rows = tableBody.querySelectorAll('tr');

        // \u6E05\u7A7A\u4E4B\u524D\u7684\u4E8B\u4EF6\u6E32\u67D3
        rows.forEach(row => {
            for (let i = 1; i < row.cells.length; i++) {
                row.cells[i].innerHTML = ''; // \u6E05\u7A7A\u5355\u5143\u683C\u5185\u5BB9
                row.cells[i].style.backgroundColor = ''; // \u6E05\u7A7A\u80CC\u666F\u8272
                row.cells[i].removeAttribute('title'); // \u79FB\u9664\u60AC\u6D6E\u63D0\u793A
            }
        });
        
        // \u83B7\u53D6\u5F53\u524D\u5468\u7684\u8D77\u59CB\u548C\u7ED3\u675F\u65F6\u95F4
        const startOfWeek = getStartOfWeek(currentDate);
        const endOfWeek = new Date(startOfWeek);
        endOfWeek.setDate(startOfWeek.getDate() + 6);

        // \u904D\u5386\u4E8B\u4EF6\u5E76\u6E32\u67D3
        events.forEach(event => {
            // \u5C06 UTC \u65F6\u95F4\u8F6C\u6362\u4E3A UTC+8 \u65F6\u95F4
            const startTime = new Date(event.startTime);
            const utcPlus8Offset = 8 * 60; // UTC+8 \u7684\u5206\u949F\u504F\u79FB\u91CF
            const localStartTime = new Date(startTime.getTime() + utcPlus8Offset * 60000);

            const endTime = new Date(localStartTime.getTime() + event.during * 60000);

            // \u8FC7\u6EE4\u975E\u672C\u5468\u4E8B\u4EF6
            if (localStartTime > endOfWeek || endTime < startOfWeek) {
                return; // \u8DF3\u8FC7\u975E\u672C\u5468\u4E8B\u4EF6
            }

            const startHour = localStartTime.getHours();
            const startMinute = localStartTime.getMinutes();
            const endHour = endTime.getHours();
            const endMinute = endTime.getMinutes();

            // \u8BA1\u7B97\u4E8B\u4EF6\u8DE8\u8D8A\u7684\u884C\u6570
            const startRow = startHour;
            const endRow = endHour + (endMinute > 0 ? 1 : 0);

            // \u8BA1\u7B97\u4E8B\u4EF6\u6240\u5728\u7684\u5217\uFF08\u661F\u671F\u51E0\uFF09
            const dayOfWeek = localStartTime.getDay();
            const colIndex = dayOfWeek === 0 ? 7 : dayOfWeek; // \u5468\u65E5\u662F\u7B2C7\u5217

            // \u521B\u5EFA\u4E8B\u4EF6\u5757
            const eventBlock = document.createElement('div');
            eventBlock.className = 'event-block';
            eventBlock.textContent = event.title;

            // \u6DFB\u52A0\u60AC\u6D6E\u63D0\u793A
            eventBlock.setAttribute('title',
                'Title: ' + event.title + '
' + 
                'Description: ' + event.description + '
' +
                'Start Time: ' + localStartTime.toLocaleString() + '
' +
                'End Time: ' + endTime.toLocaleString()
            );

            // \u8BA1\u7B97\u4E8B\u4EF6\u5757\u7684\u8D77\u59CB\u4F4D\u7F6E\u548C\u9AD8\u5EA6
            let top = 0;
            let height = 0;

            if (startRow === endRow - 1) {
                // \u4E8B\u4EF6\u5728\u540C\u4E00\u884C
                top = (startMinute / 60) * 100;
                height = ((endMinute - startMinute) / 60) * 100;
            } else {
                // \u4E8B\u4EF6\u8DE8\u8D8A\u591A\u884C
                if (startRow < endRow - 1) {
                    // \u8D77\u59CB\u884C
                    top = (startMinute / 60) * 100;
                    height = 100 - top;

                    // \u4E2D\u95F4\u884C
                    for (let i = startRow + 1; i < endRow - 1; i++) {
                        const cell = rows[i].cells[colIndex];
                        if (!cell) continue;

                        const middleBlock = eventBlock.cloneNode(true);
                        middleBlock.style.top = '0';
                        middleBlock.style.height = '100%';
                        cell.appendChild(middleBlock);
                    }

                    // \u7ED3\u675F\u884C
                    const endCell = rows[endRow - 1].cells[colIndex];
                    if (endCell) {
                        const endBlock = eventBlock.cloneNode(true);
                        endBlock.style.top = '0';
                        endBlock.style.height = (endMinute / 60) * 100 + '%';
                        endCell.appendChild(endBlock);
                    }
                }
            }

            // \u8BBE\u7F6E\u4E8B\u4EF6\u5757\u7684\u6837\u5F0F
            eventBlock.style.top = top + '%';
            eventBlock.style.height = height + '%';

            // \u5C06\u4E8B\u4EF6\u5757\u6DFB\u52A0\u5230\u8D77\u59CB\u5355\u5143\u683C
            const startCell = rows[startRow].cells[colIndex];
            if (startCell) {
                startCell.appendChild(eventBlock);
            }
        });
    }

    // \u52A0\u8F7D\u5E76\u663E\u793A\u4E8B\u4EF6
    function showEvent() {
        console.log('loading events');
        const tagsUrl = 'back/events.json';  // \u8BB0\u5F97\u4FEE\u6539\u4E3A\u771F\u6B63\u7684\u76F8\u5BF9\u8DEF\u5F84
        // const tagsUrl = './events';
        fetch(tagsUrl, {
            credentials: 'include' // \u5305\u542BCookie
        })
        .then(response => response.json())
        .then(data => {
            globalDict['events'] = data;
            renderEvent();
        })
        .catch(error => console.error('Error loading events:', error));
    }

    setTimeout(() => {
        showEvent();
    }, 10);
});
`;

// calendar/front/fileRouter.js
async function indexHTMLFunc(request) {
  const url = new URL(request.url);
  if (!url.pathname.endsWith("/")) {
    url.pathname += "/";
    return Response.redirect(url, 302);
  }
  return new Response(indexHTML, {
    headers: { "Content-Type": "text/html" }
  });
}
__name(indexHTMLFunc, "indexHTMLFunc");
var fileRoutePath = {
  "style.css": stylesCSS,
  "script.js": scriptsJS
};
var fileTypeDict = {
  // html -> { "Content-Type": "text/html" }
  "html": { "Content-Type": "text/html" },
  "css": { "Content-Type": "text/css" },
  "js": { "Content-Type": "application/javascrip" }
};
async function files(request) {
  const url = new URL(request.url);
  const filePath = url.pathname.replace(request.modulePath, "").replace(request.modulePath_sub, "").substring(1);
  if (!(filePath in fileRoutePath)) {
    return new Response("", { status: 404 });
  }
  const fileType = filePath.split(".").pop();
  const headers = fileTypeDict[fileType] || {};
  return new Response(fileRoutePath[filePath], { headers });
}
__name(files, "files");

// calendar/back/utils/user.js
async function getUserIdFromPassKey(passKey, CALENDAR_DB) {
  const query = `
        SELECT u.userid
        FROM USER_LoginInfo li
        JOIN Users u ON li.userid = u.userid
        WHERE li.passKey = ?
        ORDER BY li.loginTime DESC
        LIMIT 1;
    `;
  try {
    const result = await CALENDAR_DB.prepare(query).bind(passKey).first();
    return result ? result.userid : null;
  } catch (error) {
    console.error("Error fetching user ID:", error);
    return null;
  }
}
__name(getUserIdFromPassKey, "getUserIdFromPassKey");

// calendar/back/utils/cookie.js
function getCookie(request, name) {
  const cookieHeader = request.headers.get("Cookie");
  const cookies = cookieHeader ? cookieHeader.split(";") : [];
  for (let cookie of cookies) {
    const [key, value] = cookie.trim().split("=");
    if (key.toLowerCase() === name.toLowerCase()) {
      return value;
    }
  }
  return null;
}
__name(getCookie, "getCookie");

// calendar/back/event.js
async function createEvent(request, env) {
  const CALENDAR_DB = env.CALENDAR_DB;
  const { title, description, startTime, during, tags: tags2 } = await request.json();
  const passKey = getCookie(request, "passKey");
  const userid = await getUserIdFromPassKey(passKey, CALENDAR_DB);
  if (!userid) {
    return new Response("Invalid passKey", { status: 401 });
  }
  const insertTaskQuery = `
        INSERT INTO Calendar_Tasks (title, description, startTime, during, userid)
        VALUES (?, ?, ?, ?, ?);
    `;
  const taskValues = [title, description, startTime, during, userid];
  try {
    const taskResult = await CALENDAR_DB.prepare(insertTaskQuery).bind(...taskValues).run();
    const taskId = taskResult.meta.last_row_id;
    if (tags2 && tags2.length > 0) {
      const insertTaskTagQuery = `
                INSERT INTO Calendar_TaskTag (taskID, tagId)
                VALUES ${tags2.map(() => "(?, ?)").join(", ")};
            `;
      const tagValues = tags2.flatMap((tagId) => [taskId, tagId]);
      await CALENDAR_DB.prepare(insertTaskTagQuery).bind(...tagValues).run();
    }
    return new Response(JSON.stringify({ success: "ok", taskId }), { status: 200 });
  } catch (error) {
    return new Response("Failed to create task", { status: 500 });
  }
}
__name(createEvent, "createEvent");
async function getEvents(request, env) {
  const CALENDAR_DB = env.CALENDAR_DB;
  const passKey = getCookie(request, "passkey");
  const userid = await getUserIdFromPassKey(passKey, CALENDAR_DB);
  if (!userid) {
    return new Response("Invalid passKey", { status: 401 });
  }
  const tasks = await CALENDAR_DB.prepare(`
        SELECT
            Calendar_Tasks.*,
            GROUP_CONCAT(Calendar_TaskTag.tagId) as tagIds
        FROM
            Calendar_Tasks
        LEFT JOIN
            Calendar_TaskTag
        ON
            Calendar_Tasks.taskId = Calendar_TaskTag.taskId
        WHERE
            Calendar_Tasks.userid = ?
        GROUP BY
            Calendar_Tasks.taskId
    `).bind(userid).all();
  return new Response(JSON.stringify(tasks.results), { headers: { "Content-Type": "application/json" } });
}
__name(getEvents, "getEvents");
async function deleteEvent(request, env) {
  const CALENDAR_DB = env.CALENDAR_DB;
  const { taskId } = await request.json();
  const passKey = getCookie(request, "passKey");
  const userid = await getUserIdFromPassKey(passKey, CALENDAR_DB);
  if (!userid) {
    return new Response("Invalid passKey", { status: 401 });
  }
  const deleteResult = await CALENDAR_DB.prepare(`
        DELETE FROM Calendar_Tasks
        WHERE taskId = ? AND userid = ?
    `).bind(taskId, userid).run();
  if (deleteResult.meta.changes === 0) {
    return new Response("Access Denied!", { status: 404 });
  } else {
    return new Response(`Task ${taskId} deleted successfully.`, { status: 200 });
  }
}
__name(deleteEvent, "deleteEvent");

// calendar/back/tags.js
async function createTag(request, env) {
  const CALENDAR_DB = env.CALENDAR_DB;
  const { tagName, tagColor } = await request.json();
  const passKey = getCookie(request, "passKey");
  const userid = await getUserIdFromPassKey(passKey, CALENDAR_DB);
  if (!userid) {
    return new Response(JSON.stringify({ status: 1, message: "Invalid passKey." }), { status: 401 });
  }
  const insertTagQuery = `
        INSERT INTO Calendar_Tags (tagName, tagColor, creator)
        VALUES (?, ?, ?)
    `;
  try {
    const insertResult = await CALENDAR_DB.prepare(insertTagQuery).bind(tagName, tagColor, userid).run();
    const tagId = insertResult.meta.last_row_id;
    return new Response(JSON.stringify({ status: 0, tagId }), { status: 200 });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ status: 2, message: "Tag create faild." }), { status: 500 });
  }
}
__name(createTag, "createTag");
async function getTags(request, env) {
  const CALENDAR_DB = env.CALENDAR_DB;
  const passKey = getCookie(request, "passKey");
  const userid = await getUserIdFromPassKey(passKey, CALENDAR_DB);
  if (!userid) {
    return new Response(JSON.stringify({ status: 1, message: "Invalid passKey." }), { status: 401 });
  }
  const tags2 = await CALENDAR_DB.prepare(`
        SELECT * FROM Calendar_Tags WHERE creator = ?
    `).bind(userid).all();
  return new Response(JSON.stringify(tags2.results), { headers: { "Content-Type": "application/json" } });
}
__name(getTags, "getTags");
async function deleteTag(request, env) {
  const CALENDAR_DB = env.CALENDAR_DB;
  const passKey = getCookie(request, "passKey");
  const userid = await getUserIdFromPassKey(passKey, CALENDAR_DB);
  if (!userid) {
    return new Response(JSON.stringify({ status: 1, message: "Invalid passKey." }), { status: 401 });
  }
  const { tagId } = await request.json();
  const deleteResult = await CALENDAR_DB.prepare(`
        DELETE FROM Calendar_Tags
        WHERE tagId = ? AND creator = ?
    `).bind(tagId, userid).run();
  if (deleteResult.meta.changes === 0) {
    return new Response(JSON.stringify({ status: 2, message: "Access Denied!" }), { status: 404 });
  } else {
    return new Response(JSON.stringify({ status: 0, message: `Tag ${tagId} deleted successfully.` }), { status: 200 });
  }
}
__name(deleteTag, "deleteTag");
async function alterTag(request, env) {
  const CALENDAR_DB = env.CALENDAR_DB;
  const passKey = getCookie(request, "passKey");
  const userid = await getUserIdFromPassKey(passKey, CALENDAR_DB);
  if (!userid) {
    return new Response(JSON.stringify({ status: 1, message: "Invalid passKey." }), { status: 401 });
  }
  const { tagId, tagName, tagColor } = await request.json();
  const alterResult = await CALENDAR_DB.prepare(`
        UPDATE Calendar_Tags
        SET tagName = ?, tagColor = ?
        WHERE tagId = ? AND creator = ?
    `).bind(tagName, tagColor, tagId, userid).run();
  if (alterResult.meta.changes === 0) {
    return new Response(JSON.stringify({ status: 2, message: "Access Denied!" }), { status: 500 });
  } else {
    return new Response(JSON.stringify({ status: 0, message: `Tag ${tagId} altered successfully.` }), { status: 200 });
  }
}
__name(alterTag, "alterTag");

// calendar/handler.js
async function index(request) {
  return await indexHTMLFunc(request);
}
__name(index, "index");
async function front(request) {
  return await files(request);
}
__name(front, "front");
async function events(request, env) {
  if (request.method == "POST") {
    return await createEvent(request, env);
  } else if (request.method == "GET") {
    return await getEvents(request, env);
  } else if (request.method == "DELETE") {
    return await deleteEvent(request, env);
  }
}
__name(events, "events");
async function tags(request, env) {
  if (request.method == "POST") {
    return await createTag(request, env);
  } else if (request.method == "GET") {
    return await getTags(request, env);
  } else if (request.method == "DELETE") {
    return await deleteTag(request, env);
  } else if (request.method == "PUT") {
    return await alterTag(request, env);
  }
}
__name(tags, "tags");

// calendar/url.js
var calendarRoutes = {
  "/": index,
  "/front": front,
  "/events": events,
  "/tags": tags
};

// main.js
var routes = {
  "/img": imgRoutes,
  // 将 /img 路由映射到 img 模块
  "/github/public": github_public,
  // Github一个仓库是否为public
  "/calendar": calendarRoutes
  // 日历
};
var main_default = {
  async fetch(request, env) {
    const url = new URL(request.url);
    const path = url.pathname;
    const modulePath = Object.keys(routes).find((route) => path.startsWith(route));
    request.modulePath = modulePath;
    if (modulePath) {
      const moduleRoutes = routes[modulePath];
      const nowPath = "/" + (path.replace(modulePath, "").split("/")[1] || "");
      request.modulePath_sub = nowPath;
      const routeHandler = moduleRoutes[nowPath];
      if (routeHandler) {
        return await routeHandler(request, env);
      } else {
        return new Response("Route Not Found", { status: 404 });
      }
    } else {
      return new Response("Module Not Found", { status: 404 });
    }
  }
};
export {
  main_default as default
};
//# sourceMappingURL=main.js.map
