(define my-circular-deque%
  (class object%
    (super-new)
    
    ; k : exact-integer?
    (init-field
      k)
    
    ; insert-front : exact-integer? -> boolean?
    (define/public (insert-front value)
      )
    ; insert-last : exact-integer? -> boolean?
    (define/public (insert-last value)
      )
    ; delete-front : -> boolean?
    (define/public (delete-front)
      )
    ; delete-last : -> boolean?
    (define/public (delete-last)
      )
    ; get-front : -> exact-integer?
    (define/public (get-front)
      )
    ; get-rear : -> exact-integer?
    (define/public (get-rear)
      )
    ; is-empty : -> boolean?
    (define/public (is-empty)
      )
    ; is-full : -> boolean?
    (define/public (is-full)
      )))

;; Your my-circular-deque% object will be instantiated and called as such:
;; (define obj (new my-circular-deque% [k k]))
;; (define param_1 (send obj insert-front value))
;; (define param_2 (send obj insert-last value))
;; (define param_3 (send obj delete-front))
;; (define param_4 (send obj delete-last))
;; (define param_5 (send obj get-front))
;; (define param_6 (send obj get-rear))
;; (define param_7 (send obj is-empty))
;; (define param_8 (send obj is-full))