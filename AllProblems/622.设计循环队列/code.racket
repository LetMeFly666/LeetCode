(define my-circular-queue%
  (class object%
    (super-new)
    
    ; k : exact-integer?
    (init-field
      k)
    
    ; en-queue : exact-integer? -> boolean?
    (define/public (en-queue value)
      )
    ; de-queue : -> boolean?
    (define/public (de-queue)
      )
    ; front : -> exact-integer?
    (define/public (front)
      )
    ; rear : -> exact-integer?
    (define/public (rear)
      )
    ; is-empty : -> boolean?
    (define/public (is-empty)
      )
    ; is-full : -> boolean?
    (define/public (is-full)
      )))

;; Your my-circular-queue% object will be instantiated and called as such:
;; (define obj (new my-circular-queue% [k k]))
;; (define param_1 (send obj en-queue value))
;; (define param_2 (send obj de-queue))
;; (define param_3 (send obj front))
;; (define param_4 (send obj rear))
;; (define param_5 (send obj is-empty))
;; (define param_6 (send obj is-full))