/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation.
 * public class NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public init()
 *
 *     // Constructor initializes a single integer.
 *     public init(val: Int64)
 *
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public func isInteger(): Bool
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list.
 *     public func getInteger(): Int64
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public func setInteger(i: Int64): Unit
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer.
 *     public func getList(): ArrayList<NestedInteger>
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public func add(ni: NestedInteger): Unit
 * }
 */

class Solution {
    func deserialize(s: String): NestedInteger {

    }
}