/*
 * @Author: LetMeFly
 * @Date: 2024-04-16 09:42:40
 * @LastEditors: LetMeFly
 * @LastEditTime: 2024-04-16 10:05:45
 */
#ifdef _WIN32
#include "_[1,2]toVector.h"
#endif

/*
110
110
001
*/
class Solution {
private:
    int canDesc(int t, vector<int>& initial, vector<int>& color, vector<int>& color2size) {
        for (int i : initial) {
            if (color[i] == color[t] && i != t) {
                return 0;
            }
        }
        return color2size[color[t]];
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int cntColor = 0;
        vector<int> color(graph.size());
        vector<int> color2size(graph.size() + 1);
        for (int i = 0; i < graph.size(); i++) {  // begin from each node
            if (color[i]) {
                continue;
            }
            cntColor++;
            queue<int> q;
            q.push(i);
            color[i] = cntColor;
            color2size[cntColor]++;
            while (q.size()) {
                int thisNode = q.front();
                q.pop();
                for (int j = 0; j < graph.size(); j++) {
                    if (graph[thisNode][j] && !color[j]) {
                        q.push(j);
                        color[j] = cntColor;
                        color2size[cntColor]++;
                    }
                }
            }
        }
        int ans, maxDesc = -1;
        sort(initial.begin(), initial.end());
        for (int t : initial) {
            int thisDesc = canDesc(t, initial, color, color2size);
            if (thisDesc > maxDesc) {
                maxDesc = thisDesc;
                ans = t;
            }
        }
        return ans;
    }
};